#include "stdafx.h"
#include <hook.h>
#include "ConstantPatch.h"

bool ConstantPatch::initialize()
{
	try
	{
		setBaseNPCNames();

		setPacket();

		return true;
	}
	catch (...)
	{
		return false;
	}
}
void ConstantPatch::setBaseNPCNames()
{
	auto& hook = HookMgr::instance();

	const uint32_t addresses[] = {
		0x429B5C, 0x429BC4, 0x429C2C, 0x429C94,
		0x429CFC, 0x429D64, 0x429DCC, 0x429E34
	};
	static const char* baseNPCNames[] = {
		"npc_base/TK", "npc_base/FM", "npc_base/BM", "npc_base/HT",
		"npc_base/TK_", "npc_base/FM_", "npc_base/BM_", "npc_base/HT_"
	};
	for (auto i = 0; i < sizeof(addresses)/sizeof(decltype(addresses[0])); i++)
		hook.setValue(addresses[i] + 1, hook.getAddress(baseNPCNames[i]));
}

char Table[512] = {
	0x41, 0x6E, 0x74, 0x69, 0x48, 0x61, 0x63, 0x6B, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x34, 0x20, 0x62, 0x61, 0x6E, 0x20, 0x61, 0x63, 0x63, 0x6F,
	0x75, 0x6E, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x69, 0x6E, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x20, 0x25,
	0x24, 0x25, 0x25, 0x46, 0x25, 0x24, 0x25, 0x41, 0x53, 0x41, 0x23, 0x24, 0x34, 0x33, 0x73, 0x34,
	0x66, 0x33, 0x24, 0x24, 0x23, 0x24, 0x33, 0x34, 0x35, 0x33, 0x32, 0x66, 0x34, 0x61, 0x73, 0x35,
	0x33, 0x66, 0x32, 0x35, 0x61, 0x25, 0x23, 0x53, 0x40, 0x46, 0x23, 0x24, 0x25, 0x46, 0x25, 0x46,
	0x24, 0x53, 0x23, 0x40, 0x46, 0x25, 0x53, 0x24, 0x41, 0x46, 0x53, 0x25, 0x24, 0x23, 0x25, 0x23,
	0x40, 0x25, 0x46, 0x53, 0x46, 0x53, 0x41, 0x25, 0x23, 0x24, 0x40, 0x41, 0x53, 0x25, 0x46, 0x23,
	0x53, 0x41, 0x25, 0x46, 0x40, 0x41, 0x53, 0x25, 0x46, 0x40, 0x23, 0x25, 0x41, 0x53, 0x24, 0x46,
	0x23, 0x25, 0x53, 0x41, 0x23, 0x24, 0x40, 0x46, 0x25, 0x41, 0x53, 0x40, 0x23, 0x46, 0x25, 0x53,
	0x23, 0x46, 0x23, 0x24, 0x41, 0x53, 0x40, 0x46, 0x41, 0x53, 0x25, 0x46, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x73, 0x61, 0x69, 0x20,
	0x64, 0x65, 0x73, 0x73, 0x61, 0x20, 0x6D, 0x61, 0x6E, 0x65, 0x20, 0x6E, 0x65, 0x6D, 0x20, 0x74,
	0x65, 0x6E, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x20, 0x65, 0x20, 0x70, 0x65, 0x72, 0x63, 0x61,
	0x20, 0x64, 0x65, 0x20, 0x74, 0x65, 0x6D, 0x70, 0x6F, 0x20, 0x5E, 0x5E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x53, 0x74, 0x61, 0x72, 0x20, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6E, 0x79, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x45, 0x6E, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x20, 0x66, 0x6F, 0x72, 0x63, 0x65, 0x64, 0x20, 0x42, 0x59, 0x20, 0x41, 0x44, 0x4D, 0x20,
	0x47, 0x61, 0x74, 0x65, 0x4B, 0x69, 0x6C, 0x6C, 0x65, 0x72, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x41,
	0x44, 0x4D, 0x20, 0x52, 0x61, 0x70, 0x68, 0x61, 0x65, 0x6C, 0x78, 0x44, 0x53, 0x74, 0x61, 0x72,
	0x20, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6E, 0x79, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x45,
	0x6E, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x63, 0x65, 0x64, 0x20, 0x42, 0x59,
	0x20, 0x41, 0x44, 0x4D, 0x20, 0x47, 0x61, 0x74, 0x65, 0x4B, 0x69, 0x6C, 0x6C, 0x65, 0x72, 0x20,
	0x61, 0x6E, 0x64, 0x20, 0x41, 0x44, 0x4D, 0x20, 0x52, 0x61, 0x70, 0x68, 0x61, 0x65, 0x6C, 0x78,
	0x44, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x45, 0x6E, 0x64, 0x20, 0x6F, 0x66, 0x20, 0x65, 0x6E, 0x63, 0x2E
};

void ConstantPatch::setPacket()
{
	auto& hook = HookMgr::instance();

	pUser = (CUserDB*)0x1E01840;
	 
	//memcpy((char*)0x482510, Table, 512); Keys
}
void ConstantPatch::setFilePaths()
{
	auto& hook = HookMgr::instance();

	hook.setValue(0x42F064 + 1, [&hook](){
		static const char* str = "./server/%2.2d/update/*.*";
		return hook.getAddress(str);
	}());

	hook.setValue(0x42F0FF + 1, [&hook](){
		static const char* str = "./server/%2.2d/update/%s";
		return hook.getAddress(str);
	}());

	hook.setValue(0x430678 + 1, [&hook](){
		static const char* str = "./server/%2.2d/item/*.*";
		return hook.getAddress(str);
	}());

	hook.setValue(0x430730 + 1, [&hook](){
		static const char* str = "./server/%2.2d/item/%s";
		return hook.getAddress(str);
	}());

	hook.setValue(0x430752 + 1, [&hook](){
		static const char* str = "./server/%2.2d/err/%s";
		return hook.getAddress(str);
	}());
}