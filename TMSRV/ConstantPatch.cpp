#include "stdafx.h"
#include <hook.h>
#include "ConstantPatch.h"

static BYTE keys[] = {
	0x84, 0x87, 0x37, 0xd7, 0xea, 0x79, 0x91, 0x7d, 0x4b, 0x4b, 0x85, 0x7d, 0x87, 0x81, 0x91, 0x7c, 0x0f, 0x73, 0x91, 0x91, 0x87, 0x7d, 0x0d, 0x7d, 0x86, 0x8f, 0x73, 0x0f, 0xe1, 0xdd, 0x85, 0x7d,
	0x05, 0x7d, 0x85, 0x83, 0x87, 0x9c, 0x85, 0x33, 0x0d, 0xe2, 0x87, 0x19, 0x0f, 0x79, 0x85, 0x86, 0x37, 0x7d, 0xd7, 0xdd, 0xe9, 0x7d, 0xd7, 0x7d, 0x85, 0x79, 0x05, 0x7d, 0x0f, 0xe1, 0x87, 0x7e,
	0x23, 0x87, 0xf5, 0x79, 0x5f, 0xe3, 0x4b, 0x83, 0xa3, 0xa2, 0xae, 0x0e, 0x14, 0x7d, 0xde, 0x7e, 0x85, 0x7a, 0x85, 0xaf, 0xcd, 0x7d, 0x87, 0xa5, 0x87, 0x7d, 0xe1, 0x7d, 0x88, 0x7d, 0x15, 0x91,
	0x23, 0x7d, 0x87, 0x7c, 0x0d, 0x7a, 0x85, 0x87, 0x17, 0x7c, 0x85, 0x7d, 0xac, 0x80, 0xbb, 0x79, 0x84, 0x9b, 0x5b, 0xa5, 0xd7, 0x8f, 0x05, 0x0f, 0x85, 0x7e, 0x85, 0x80, 0x85, 0x98, 0xf5, 0x9d,
	0xa3, 0x1a, 0x0d, 0x19, 0x87, 0x7c, 0x85, 0x7d, 0x84, 0x7d, 0x85, 0x7e, 0xe7, 0x97, 0x0d, 0x0f, 0x85, 0x7b, 0xea, 0x7d, 0xad, 0x80, 0xad, 0x7d, 0xb7, 0xaf, 0x0d, 0x7d, 0xe9, 0x3d, 0x85, 0x7d,
	0x87, 0xb7, 0x23, 0x7d, 0xe7, 0xb7, 0xa3, 0x0c, 0x87, 0x7e, 0x85, 0xa5, 0x7d, 0x76, 0x35, 0xb9, 0x0d, 0x6f, 0x23, 0x7d, 0x87, 0x9b, 0x85, 0x0c, 0xe1, 0xa1, 0x0d, 0x7f, 0x87, 0x7d, 0x84, 0x7a,
	0x84, 0x7b, 0xe1, 0x86, 0xe8, 0x6f, 0xd1, 0x79, 0x85, 0x19, 0x53, 0x95, 0xc3, 0x47, 0x19, 0x7d, 0xe7, 0x0c, 0x37, 0x7c, 0x23, 0x7d, 0x85, 0x7d, 0x4b, 0x79, 0x21, 0xa5, 0x87, 0x7d, 0x19, 0x7d,
	0x0d, 0x7d, 0x15, 0x91, 0x23, 0x7d, 0x87, 0x7c, 0x85, 0x7a, 0x85, 0xaf, 0xcd, 0x7d, 0x87, 0x7d, 0xe9, 0x3d, 0x85, 0x7d, 0x15, 0x79, 0x85, 0x7d, 0xc1, 0x7b, 0xea, 0x7d, 0xb7, 0x7d, 0x85, 0x7d,
	0x85, 0x7d, 0x0d, 0x7d, 0xe9, 0x73, 0x85, 0x79, 0x05, 0x7d, 0xd7, 0x7d, 0x85, 0xe1, 0xb9, 0xe1, 0x0f, 0x65, 0x85, 0x86, 0x2d, 0x7d, 0xd7, 0xdd, 0xa3, 0x8e, 0xe6, 0x7d, 0xde, 0x7e, 0xae, 0x0e,
	0x0f, 0xe1, 0x89, 0x7e, 0x23, 0x7d, 0xf5, 0x79, 0x23, 0xe1, 0x4b, 0x83, 0x0c, 0x0f, 0x85, 0x7b, 0x85, 0x7e, 0x8f, 0x80, 0x85, 0x98, 0xf5, 0x7a, 0x85, 0x1a, 0x0d, 0xe1, 0x0f, 0x7c, 0x89, 0x0c,
	0x85, 0x0b, 0x23, 0x69, 0x87, 0x7b, 0x23, 0x0c, 0x1f, 0xb7, 0x21, 0x7a, 0x88, 0x7e, 0x8f, 0xa5, 0x7d, 0x80, 0xb7, 0xb9, 0x18, 0xbf, 0x4b, 0x19, 0x85, 0xa5, 0x91, 0x80, 0x87, 0x81, 0x87, 0x7c,
	0x0f, 0x73, 0x91, 0x91, 0x84, 0x87, 0x37, 0xd7, 0x86, 0x79, 0xe1, 0xdd, 0x85, 0x7a, 0x73, 0x9b, 0x05, 0x7d, 0x0d, 0x83, 0x87, 0x9c, 0x85, 0x33, 0x87, 0x7d, 0x85, 0x0f, 0x87, 0x7d, 0x0d, 0x7d,
	0xf6, 0x7e, 0x87, 0x7d, 0x88, 0x19, 0x89, 0xf5, 0xd1, 0xdd, 0x85, 0x7d, 0x8b, 0xc3, 0xea, 0x7a, 0xd7, 0xb0, 0x0d, 0x7d, 0x87, 0xa5, 0x87, 0x7c, 0x73, 0x7e, 0x7d, 0x86, 0x87, 0x23, 0x85, 0x10,
	0xd7, 0xdf, 0xed, 0xa5, 0xe1, 0x7a, 0x85, 0x23, 0xea, 0x7e, 0x85, 0x98, 0xad, 0x79, 0x86, 0x7d, 0x85, 0x7d, 0xd7, 0x7d, 0xe1, 0x7a, 0xf5, 0x7d, 0x85, 0xb0, 0x2b, 0x37, 0xe1, 0x7a, 0x87, 0x79,
	0x84, 0x7d, 0x73, 0x73, 0x87, 0x7d, 0x23, 0x7d, 0xe9, 0x7d, 0x85, 0x7e, 0x02, 0x7d, 0xdd, 0x2d, 0x87, 0x79, 0xe7, 0x79, 0xad, 0x7c, 0x23, 0xda, 0x87, 0x0d, 0x0d, 0x7b, 0xe7, 0x79, 0x9b, 0x7d,
	0xd7, 0x8f, 0x05, 0x7d, 0x0d, 0x34, 0x8f, 0x7d, 0xad, 0x87, 0xe9, 0x7c, 0x85, 0x80, 0x85, 0x79, 0x8a, 0xc3, 0xe7, 0xa5, 0xe8, 0x6b, 0x0d, 0x74, 0x10, 0x73, 0x33, 0x17, 0x0d, 0x37, 0x21, 0x19
};

bool ConstantPatch::initialize()
{
	try
	{
		setSummonNames();
		setFilePaths();
		setVersion();
		setOtherValues();
		setPointer(); 
		return true;
	}
	catch (...)
	{
		return false;
	}
}

void ConstantPatch::setOtherValues()
{
	auto& hook = HookMgr::instance();

	/*Maximum quest exp reward (Quest256exp.txt)*/
	hook.setValue(0x4CD20B + 6, 2000000);

	/*Maximum quest gold reward (Quest256gold.txt)*/
	hook.setValue(0x4CD3CB + 6, 2000000);

	/* Corrige para que os pontos de skill sejam verificados mesmo que o personagem seja celestial */
	hook.fillWithNop(0x48DC65, 9);

	/* Corrige para que se a classe for maior que sub celestial, não deixa comprar a oitava skill */
	hook.setValue<uint8_t>(0x48DF37 + 1, 0x3C);

	/* Preço da Oitava para Mortal, Arch e Cele */
	hook.setValue(0x48DF0F + 6, 5000000);
	hook.setValue(0x48DF24 + 6, 5000000);
	hook.setValue(0x48DF39 + 6, 5000000);

	/* Define level 0 para o uso do comando /gm */
	//hook.setValue<uint16_t>(0x47D4C1 + 6, 0);
	//hook.setValue<uint16_t>(0x47D4EB + 1, 0);
		
	/* AddCrackError */
	hook.setValue(0x8C75F54, 0);

	/* MaxLevelTicket */
	hook.setValue(0x8C75F1C, 2);

	/* Max Level Training Camp */
	hook.setValue(0x5A0F18, 34);

	/*Multiplicador do Baú de EXP*/
	hook.setValue(0x419B5C + 1, 59);

	/* Pista de Runas ativa mesmo com kefra vivo */
	hook.setValue(0x8C76170, 1);

	/* Correção para combinação da Secreta Vento */
	hook.setValue(0x480A4C, 5122);
	hook.setValue(0x480A5E, 5119);
	hook.setValue(0x480A70, 5132);
	hook.setValue(0x480A81, 5120);
	hook.setValue(0x480A93, 5130);
	hook.setValue(0x480AA5, 5133);
	hook.setValue(0x480AB6, 5123);

	/* Controle % para rate da composição de Pedra Secreta */
	hook.setValue<uint8_t>(0x480B71 + 6, SECRETSTONE_RATE - 1);

	/* Controle % para rate da composição de Pedra Espiritual com Adicional */
	hook.setValue<uint8_t>(0x483B96 + 2, SPIRITUALSTONE_RATE); // 20
	hook.setValue<uint8_t>(0x483C42 + 2, SPIRITUALSTONE_RATE); // 20

	/*Limite de taxa de drop*/
	hook.setValue<uint32_t>(0x44FD86 + 7, 3000);
	hook.setValue<uint32_t>(0x44FECE + 7, 3000);
	hook.setValue<uint32_t>(0x450017 + 7, 3000);
	hook.setValue<uint32_t>(0x450160 + 7, 3000);
	hook.setValue<uint32_t>(0x433854 + 6, 3000);
	 

	/* Tempo das Joias PvP*/
	hook.setValue(0x4C5117 + 7, 451);

	/* Corrige o teleporte da pista +4 */
	hook.setValue<uint8_t>(0x4D4B72 + 2, 8);
	hook.setValue<uint8_t>(0x4D4BAC + 2, 8);
	 

	hook.setValue<uint16_t>(0x4908D5 + 1, 0);
	hook.setValue<uint16_t>(0x4908EF + 2, 0);
	hook.setValue<uint16_t>(0x490484 + 2, 0);
	hook.setValue<uint16_t>(0x49049F + 2, 0);
	hook.setHook(eHookType::JMP, 0x4904AB, 0x490512, 1);
	hook.setHook(eHookType::JMP, 0x4908FB, 0x490962, 1);
	hook.setHook(eHookType::JMP, 0x4909F7, 0x490A6C, 2);

	hook.setValue<uint16_t>(0x4BD3B2 + 6, ENDLESSTOWER);
	hook.setValue<uint16_t>(0x458056 + 3, 12700);
	hook.setValue<uint16_t>(0x463D51 + 6, 12700);

	/* CONTROLE DE RATE POEIRA DE LAC
	0x64 = 100% , 0x28 = 40% , 0x23 = 35% ,  0x1E = 30% , 0x0A = 10% */
	
	/* Chance do Lac (+6 ao +9) - Item Arch Normal*/

	hook.setValue<uint8_t>(0x595270, 0x64);      //+6 
	hook.setValue<uint8_t>(0x595274, 0x64);      //+7 
	hook.setValue<uint8_t>(0x595274 + 4, 0x64); // +8 
	hook.setValue<uint8_t>(0x595274 + 8, 0x64);//+9  

	/* Chance do Lac (+6 ao +9) - Item Arch Anct */

	hook.setValue<uint8_t>(0x5952A0, 0x64); // + 6  
	hook.setValue<uint8_t>(0x5952A0 + 4, 0x64);//+7 
	hook.setValue<uint8_t>(0x5952A0 + 8, 0x64);//+8 
	hook.setValue<uint8_t>(0x5952A0 + 12, 0x64);//+9 

	/* Chance do Lac (+6 ao +9) - Item Mortal Normal D*/

	hook.setValue<uint8_t>(0x595240, 0x64);//+6 
	hook.setValue<uint8_t>(0x595240 + 4, 0x64);//+7 
	hook.setValue<uint8_t>(0x595240 + 8, 0x64);// +8 
	hook.setValue<uint8_t>(0x595240 + 12, 0x64);// +9 

	/* Arch Normal +10 ~ +11 */
	hook.setValue<uint8_t>(0x595284, 0x64);//+ 11 

	/* Arch Anct +10 ~ +11 */
	hook.setValue<uint8_t>(0x5952B4, 0x64);//+ 11 

	/* Mortal Normal D +10 ~ +11 */
	hook.setValue<uint8_t>(0x5952B454, 0x64);//+ 11 


}

void ConstantPatch::setPacket()
{
	auto& hook = HookMgr::instance(); 
}

void ConstantPatch::setPointer()
{
	pMob = (CMob*)0x1FDECA0; 
	pUser = (CUser*)0x752BAD8;
	pItem = (CItem*)0x8863698;
	DBServerSocket = (CPSock*)0xBDEA50;
	g_pItemList = (STRUCT_ITEMLIST*)0x9CCC40;
	g_pSpell = (STRUCT_SPELL*)0x8B61C8;
	pItemGrid = reinterpret_cast<unsigned short(*)[MAX_GRIDX]>((unsigned short*)0x54F8194);
	pMobGrid = reinterpret_cast<unsigned short(*)[MAX_GRIDX]>((unsigned short*)0x34EA550);
	g_pMessageStringTable = reinterpret_cast<char(*)[MAX_STRINGTABLESIZE]>((char*)0x8A67C4); 
	mNPCGen = (CNPCGenerator*)0xBDEAA0;
	g_pFormation = reinterpret_cast<char(*)[12][2]>((char*)0x597048);
	//Global::guild = reinterpret_cast<STRUCT_GUILD(*)[4096]>((STRUCT_GUILD*)0x88B5EE8);
	 
}

char StarKeyTable[512] = {
	0x41, 0x6E, 0x74, 0x69, 0x48, 0x61, 0x63, 0x6B, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x34, 0x20, 0x62, 0x61, 0x6E, 0x20, 0x61, 0x63, 0x63, 0x6F,
	0x75, 0x6E, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x69, 0x6E, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x20, 0x25,
	0x24, 0x25, 0x25, 0x46, 0x25, 0x24, 0x25, 0x41, 0x53, 0x41, 0x23, 0x24, 0x34, 0x33, 0x73, 0x34,
	0x66, 0x33, 0x24, 0x24, 0x23, 0x24, 0x33, 0x34, 0x35, 0x33, 0x32, 0x66, 0x34, 0x61, 0x73, 0x35,
	0x33, 0x66, 0x32, 0x35, 0x61, 0x25, 0x23, 0x53, 0x40, 0x46, 0x23, 0x24, 0x25, 0x46, 0x25, 0x46,
	0x24, 0x53, 0x23, 0x40, 0x46, 0x25, 0x53, 0x24, 0x41, 0x46, 0x53, 0x25, 0x24, 0x23, 0x25, 0x23,
	0x40, 0x25, 0x46, 0x53, 0x46, 0x53, 0x41, 0x25, 0x23, 0x24, 0x40, 0x41, 0x53, 0x25, 0x46, 0x23,
	0x53, 0x41, 0x25, 0x46, 0x40, 0x41, 0x53, 0x25, 0x46, 0x40, 0x23, 0x25, 0x41, 0x53, 0x24, 0x46,
	0x23, 0x25, 0x53, 0x41, 0x23, 0x24, 0x40, 0x46, 0x25, 0x41, 0x53, 0x40, 0x23, 0x46, 0x25, 0x53,
	0x23, 0x46, 0x23, 0x24, 0x41, 0x53, 0x40, 0x46, 0x41, 0x53, 0x25, 0x46, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x73, 0x61, 0x69, 0x20,
	0x64, 0x65, 0x73, 0x73, 0x61, 0x20, 0x6D, 0x61, 0x6E, 0x65, 0x20, 0x6E, 0x65, 0x6D, 0x20, 0x74,
	0x65, 0x6E, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x20, 0x65, 0x20, 0x70, 0x65, 0x72, 0x63, 0x61,
	0x20, 0x64, 0x65, 0x20, 0x74, 0x65, 0x6D, 0x70, 0x6F, 0x20, 0x5E, 0x5E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x53, 0x74, 0x61, 0x72, 0x20, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6E, 0x79, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x45, 0x6E, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x20, 0x66, 0x6F, 0x72, 0x63, 0x65, 0x64, 0x20, 0x42, 0x59, 0x20, 0x41, 0x44, 0x4D, 0x20,
	0x47, 0x61, 0x74, 0x65, 0x4B, 0x69, 0x6C, 0x6C, 0x65, 0x72, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x41,
	0x44, 0x4D, 0x20, 0x52, 0x61, 0x70, 0x68, 0x61, 0x65, 0x6C, 0x78, 0x44, 0x53, 0x74, 0x61, 0x72,
	0x20, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6E, 0x79, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x45,
	0x6E, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x63, 0x65, 0x64, 0x20, 0x42, 0x59,
	0x20, 0x41, 0x44, 0x4D, 0x20, 0x47, 0x61, 0x74, 0x65, 0x4B, 0x69, 0x6C, 0x6C, 0x65, 0x72, 0x20,
	0x61, 0x6E, 0x64, 0x20, 0x41, 0x44, 0x4D, 0x20, 0x52, 0x61, 0x70, 0x68, 0x61, 0x65, 0x6C, 0x78,
	0x44, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,
	0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x45, 0x6E, 0x64, 0x20, 0x6F, 0x66, 0x20, 0x65, 0x6E, 0x63, 0x2E
};

void ConstantPatch::setVersion()
{
	std::time_t now = time(0);
	std::tm when;
	::localtime_s(&when, &now);

	auto& hook = HookMgr::instance();
	hook.setValue<uint8_t>(0x45F733 + 2, 80);
	hook.setValue(0x5A1344, 7556); // Client Version
	hook.setValue<uint8_t>(0x45F74F + 2, 10); // Maximum Difference between server and client version 
	hook.setValue(0x45C301 + 1, 8281); // Client Port
   //hook.setValue(0x5A11E8, 0); // Drop de item ao morrer
      
	hook.setValue(0x5A10E4, 20); // Guerra de Cidades
	hook.setValue(0x5A10E8, 21); // Guerra de Castelos
}

void ConstantPatch::setSummonNames()
{
	auto& hook = HookMgr::instance();

	const auto nSummonFolderAddress = [&hook](){
		static const char* str = "npc_base";
		return hook.getAddress(&str);
	} ();

	const uint32_t summonFolderAddresses[] =
	{
		0x41C38A, 0x41C43C, 0x41C49A, 0x41C557, 0x41C5B5, 0x41C672, 0x41C6D0, 0x41C78D, 0x41C7EB,
		0x41C8A8, 0x41C906, 0x41C9C3, 0x41CA21, 0x41CADE, 0x41CB3C, 0x41CBF9, 0x41CC57, 0x41CD14,
		0x41CD72, 0x41CE2F, 0x41CE8D, 0x41CF4A, 0x41CFA8, 0x41D065, 0x41D0C3, 0x41D180, 0x41D1DE,
		0x41D29B, 0x41D2F9, 0x41D3B6, 0x41D414, 0x41D4D1
	};
	const uint32_t summonFolderAddresses_2[] =
	{
		0x41C3DE, 0x41C4F9, 0x41C614, 0x41C72F, 0x41C84A, 0x41C965, 0x41CA80, 0x41CB9B, 0x41CCB6,
		0x41CDD1, 0x41CEEC, 0x41D007, 0x41D122, 0x41D23D, 0x41D358, 0x41D473
	};

	for (auto i = 0; i < sizeof(summonFolderAddresses) / sizeof(decltype(summonFolderAddresses[0])); i++)
		hook.setValue(summonFolderAddresses[i] + 2, nSummonFolderAddress);

	for (auto i = 0; i < sizeof(summonFolderAddresses_2) / sizeof(decltype(summonFolderAddresses_2[0])); i++)
		hook.setValue(summonFolderAddresses_2[i] + 1, nSummonFolderAddress);

	const uint32_t summonNameAddresses[] =
	{
		0x41C379, 0x41C3C7, 0x41C425, 0x41C484, 0x41C4E2, 0x41C540, 0x41C59F, 0x41C5FD, 0x41C65B,
		0x41C6BA, 0x41C718, 0x41C776, 0x41C7D5, 0x41C833, 0x41C891, 0x41C8F0, 0x41C94E, 0x41C9AC,
		0x41CA0B, 0x41CA69, 0x41CAC7, 0x41CB26, 0x41CB84, 0x41CBE2, 0x41CC41, 0x41CC9F, 0x41CCFD,
		0x41CD5C, 0x41CDBA, 0x41CE18, 0x41CE77, 0x41CED5, 0x41CF33, 0x41CF92, 0x41CFF0, 0x41D04E,
		0x41D0AD, 0x41D10B, 0x41D169, 0x41D1C8, 0x41D226, 0x41D284, 0x41D2E3, 0x41D341, 0x41D39F,
		0x41D3FE, 0x41D45C, 0x41D4BA
	};

	static const char* summonName[] =
	{
		"Condor", "Javali", "Lobo", "Urso", "Tigre", "Gorila", "Dragao_Negro", "Succubus",
		"Porco", "Javali_", "Lobo_", "Dragao_Menor", "Urso_", "Dente_de_Sabre",
		"Sem_Sela", "Fantasma", "Leve", "Equipado", "Andaluz",
		"Sem_Sela_", "Fantasma_", "Leve_", "Equipado_", "Andaluz_",
		"Fenrir", "Tigre_de_Gelo", "Fenrir_Sombrio", "Tigre_de_Fogo", "Dragao_Vermelho",
		"Unicornio", "Pegasus", "Unisus", "Grifo", "Hippo_Grifo",
		"Grifo_Sangrento", "Sleipnir", "Svadilfari",

		"Helio", "Humphrey", "Sabina",/*->*/ "Humphrey", "Sabina", "Naomi",
		"Gremlin", "Orc_Arqueiro", "Troll", "Carbuncle", "Ghoul"
	};
	for (auto i = 0; i < sizeof(summonNameAddresses) / sizeof(decltype(summonNameAddresses[0])); i++)
		hook.setValue(summonNameAddresses[i] + 1, hook.getAddress(summonName[i]));
}

void ConstantPatch::setFilePaths()
{
	auto& hook = HookMgr::instance();

	hook.setValue(0x40ECD3 + 1, [&hook]() {
		static const char* str = "./settings/Lotto.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x4C9721 + 1, [&hook]() {
		static const char* str = "./settings/KhepraDropItem.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x45C3AB + 1, [&hook]() {
		static const char* str = "./settings/CountryIP.csv";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x45B95D + 1, [&hook]() {
		static const char* str = "./settings/DeleteItem.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x42D1B3 + 1, [&hook]() {
		static const char* str = "./settings/HellGateWeapon.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x42D903 + 1, [&hook]() {
		static const char* str = "./settings/HellGateArmor.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x42E013 + 1, [&hook]() {
		static const char* str = "./settings/HellGateAccessory.txt";
		return hook.getAddress(str);
	} ());
	
	hook.setValue(0x42E013 + 1, [&hook]() {
		static const char* str = "./settings/HellGateAccessory.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x4CD187 + 1, [&hook]() {
		static const char* str = "./settings/Quest256Exp.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x4CD347 + 1, [&hook]() {
		static const char* str = "./settings/Quest256Gold.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x402A9D + 1, [&hook]() {
		static const char* str = "./settings/ItemPrice.bin";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x4029E9 + 1, [&hook]() {
		static const char* str = "./settings/ItemPrice.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x414923 + 1, [&hook]() {
		static const char* str = "./settings/GameRoomIP.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x414BB3 + 1, [&hook]() {
		static const char* str = "./settings/BlockIP.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x44652D + 1, [&hook]() {
		static const char* str = "./settings/Mission.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x4B9A4A + 1, [&hook]() {
		static const char* str = "./settings/Quiz.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x4CD4F3 + 1, [&hook]() {
		static const char* str = "./settings/GuildString.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x4DA3E3 + 1, [&hook]() {
		static const char* str = "./settings/MacAddress.txt";
		return hook.getAddress(str);
	} ());

	hook.setValue(0x454DCE + 1, [&hook]() {
		static const char* str = "./settings/RandomQuiz.txt";
		return hook.getAddress(str);
	} ());

	const auto LevelItemStrAddress = [&hook]() {
		static const char* str = "./settings/Lvitem.txt";
		return hook.getAddress(str);
	}();
	hook.setValue(0x45B543 + 1, LevelItemStrAddress);

	const auto challStrAddress = [&hook](){
		static const char* str = "./settings/Chall_%2.2d_%2.2d.txt";
		return hook.getAddress(str);
	} ();
	hook.setValue(0x4BA83B + 1, challStrAddress);
	hook.setValue(0x4BA6E0 + 1, challStrAddress);

	const auto guildStrAddress = [&hook](){
		static const char* str = "./settings/Guild_%2.2d_%2.2d.txt";
		return hook.getAddress(str);
	} ();
	hook.setValue(0x4551FF + 1, guildStrAddress);
	hook.setValue(0x45580D + 1, guildStrAddress);

	const auto totoGameStrAddress = [&hook](){
		static const char* str = "./settings/TOTOGame.csv";
		return hook.getAddress(str);
	} ();
	hook.setValue(0x435386 + 1, totoGameStrAddress);
	hook.setValue(0x45C333 + 1, totoGameStrAddress);

	const auto languageStrAddress = [&hook](){
		static const char* str = "./settings/Language.txt";
		return hook.getAddress(str);
	} ();
	hook.setValue(0x434B32 + 1, languageStrAddress);
	hook.setValue(0x4BA04E + 1, languageStrAddress);

	const auto totoDataStrAddress = [&hook](){
		static const char* str = "./settings/Language.txt";
		return hook.getAddress(str);
	} ();
	hook.setValue(0x4D025A + 1, totoDataStrAddress);
	hook.setValue(0x4D045A + 1, totoDataStrAddress);


}
